// Code generated by protoc-gen-go.
// source: types.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	Identifier
	Value
	ValueList
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Identifier struct {
	Host           string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Plugin         string `protobuf:"bytes,2,opt,name=plugin" json:"plugin,omitempty"`
	PluginInstance string `protobuf:"bytes,3,opt,name=plugin_instance,json=pluginInstance" json:"plugin_instance,omitempty"`
	Type           string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	TypeInstance   string `protobuf:"bytes,5,opt,name=type_instance,json=typeInstance" json:"type_instance,omitempty"`
}

func (m *Identifier) Reset()                    { *m = Identifier{} }
func (m *Identifier) String() string            { return proto.CompactTextString(m) }
func (*Identifier) ProtoMessage()               {}
func (*Identifier) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Identifier) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Identifier) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *Identifier) GetPluginInstance() string {
	if m != nil {
		return m.PluginInstance
	}
	return ""
}

func (m *Identifier) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Identifier) GetTypeInstance() string {
	if m != nil {
		return m.TypeInstance
	}
	return ""
}

type Value struct {
	// Types that are valid to be assigned to Value:
	//	*Value_Counter
	//	*Value_Gauge
	//	*Value_Derive
	//	*Value_Absolute
	Value isValue_Value `protobuf_oneof:"value"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isValue_Value interface {
	isValue_Value()
}

type Value_Counter struct {
	Counter uint64 `protobuf:"varint,1,opt,name=counter,oneof"`
}
type Value_Gauge struct {
	Gauge float64 `protobuf:"fixed64,2,opt,name=gauge,oneof"`
}
type Value_Derive struct {
	Derive int64 `protobuf:"varint,3,opt,name=derive,oneof"`
}
type Value_Absolute struct {
	Absolute uint64 `protobuf:"varint,4,opt,name=absolute,oneof"`
}

func (*Value_Counter) isValue_Value()  {}
func (*Value_Gauge) isValue_Value()    {}
func (*Value_Derive) isValue_Value()   {}
func (*Value_Absolute) isValue_Value() {}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Value) GetCounter() uint64 {
	if x, ok := m.GetValue().(*Value_Counter); ok {
		return x.Counter
	}
	return 0
}

func (m *Value) GetGauge() float64 {
	if x, ok := m.GetValue().(*Value_Gauge); ok {
		return x.Gauge
	}
	return 0
}

func (m *Value) GetDerive() int64 {
	if x, ok := m.GetValue().(*Value_Derive); ok {
		return x.Derive
	}
	return 0
}

func (m *Value) GetAbsolute() uint64 {
	if x, ok := m.GetValue().(*Value_Absolute); ok {
		return x.Absolute
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_Counter)(nil),
		(*Value_Gauge)(nil),
		(*Value_Derive)(nil),
		(*Value_Absolute)(nil),
	}
}

func _Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Value)
	// value
	switch x := m.Value.(type) {
	case *Value_Counter:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Counter))
	case *Value_Gauge:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.Gauge))
	case *Value_Derive:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Derive))
	case *Value_Absolute:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Absolute))
	case nil:
	default:
		return fmt.Errorf("Value.Value has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 1: // value.counter
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Value_Counter{x}
		return true, err
	case 2: // value.gauge
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &Value_Gauge{math.Float64frombits(x)}
		return true, err
	case 3: // value.derive
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Value_Derive{int64(x)}
		return true, err
	case 4: // value.absolute
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Value_Absolute{x}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Value)
	// value
	switch x := m.Value.(type) {
	case *Value_Counter:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Counter))
	case *Value_Gauge:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case *Value_Derive:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Derive))
	case *Value_Absolute:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Absolute))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ValueList struct {
	Values     []*Value                    `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	Time       *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	Interval   *google_protobuf.Duration   `protobuf:"bytes,3,opt,name=interval" json:"interval,omitempty"`
	Identifier *Identifier                 `protobuf:"bytes,4,opt,name=identifier" json:"identifier,omitempty"`
	DsNames    []string                    `protobuf:"bytes,5,rep,name=ds_names,json=dsNames" json:"ds_names,omitempty"`
}

func (m *ValueList) Reset()                    { *m = ValueList{} }
func (m *ValueList) String() string            { return proto.CompactTextString(m) }
func (*ValueList) ProtoMessage()               {}
func (*ValueList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ValueList) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ValueList) GetTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ValueList) GetInterval() *google_protobuf.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *ValueList) GetIdentifier() *Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *ValueList) GetDsNames() []string {
	if m != nil {
		return m.DsNames
	}
	return nil
}

func init() {
	proto.RegisterType((*Identifier)(nil), "collectd.types.Identifier")
	proto.RegisterType((*Value)(nil), "collectd.types.Value")
	proto.RegisterType((*ValueList)(nil), "collectd.types.ValueList")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0x4d, 0xab, 0xd3, 0x40,
	0x14, 0x6d, 0xcc, 0x47, 0xdb, 0x1b, 0x7d, 0xc2, 0x80, 0x8f, 0xbc, 0xf0, 0xa8, 0xa5, 0x2e, 0xec,
	0xc6, 0x09, 0x54, 0xdc, 0xb8, 0x2c, 0x2e, 0x5a, 0x10, 0x17, 0x83, 0xb8, 0x70, 0x53, 0xa6, 0xc9,
	0x34, 0x0e, 0xa4, 0x99, 0x90, 0x99, 0x14, 0x04, 0x7f, 0x89, 0xbf, 0xd4, 0xa5, 0xcc, 0x9d, 0x24,
	0xd5, 0xbe, 0x55, 0xef, 0x3d, 0xf7, 0xdc, 0x73, 0xcf, 0xf4, 0x04, 0x62, 0xf3, 0xb3, 0x11, 0x9a,
	0x36, 0xad, 0x32, 0x8a, 0xdc, 0xe5, 0xaa, 0xaa, 0x44, 0x6e, 0x0a, 0x8a, 0x68, 0xba, 0x28, 0x95,
	0x2a, 0x2b, 0x91, 0xe1, 0xf4, 0xd8, 0x9d, 0xb2, 0xa2, 0x6b, 0xb9, 0x91, 0xaa, 0x76, 0xfc, 0xf4,
	0xf5, 0xed, 0xdc, 0xc8, 0xb3, 0xd0, 0x86, 0x9f, 0x1b, 0x47, 0x58, 0xfd, 0xf6, 0x00, 0xf6, 0x85,
	0xa8, 0x8d, 0x3c, 0x49, 0xd1, 0x12, 0x02, 0xc1, 0x0f, 0xa5, 0x4d, 0xe2, 0x2d, 0xbd, 0xf5, 0x9c,
	0x61, 0x4d, 0xee, 0x21, 0x6a, 0xaa, 0xae, 0x94, 0x75, 0xf2, 0x0c, 0xd1, 0xbe, 0x23, 0x6f, 0xe1,
	0xa5, 0xab, 0x0e, 0xb2, 0xd6, 0x86, 0xd7, 0xb9, 0x48, 0x7c, 0x24, 0xdc, 0x39, 0x78, 0xdf, 0xa3,
	0x56, 0xd4, 0xba, 0x4d, 0x02, 0x27, 0x6a, 0x6b, 0xf2, 0x06, 0x5e, 0xd8, 0xdf, 0xeb, 0x6a, 0x88,
	0xc3, 0xe7, 0x16, 0x1c, 0x16, 0x57, 0xbf, 0x20, 0xfc, 0xc6, 0xab, 0x4e, 0x90, 0x14, 0xa6, 0xb9,
	0xea, 0x6a, 0x23, 0x5a, 0x74, 0x16, 0xec, 0x26, 0x6c, 0x00, 0xc8, 0x3d, 0x84, 0x25, 0xef, 0x4a,
	0x81, 0xee, 0xbc, 0xdd, 0x84, 0xb9, 0x96, 0x24, 0x10, 0x15, 0xa2, 0x95, 0x17, 0xe7, 0xca, 0xdf,
	0x4d, 0x58, 0xdf, 0x93, 0x47, 0x98, 0xf1, 0xa3, 0x56, 0x55, 0x67, 0x9c, 0x27, 0x2b, 0x37, 0x22,
	0xdb, 0x29, 0x84, 0x17, 0x7b, 0x74, 0xf5, 0xc7, 0x83, 0x39, 0x9e, 0xff, 0x2c, 0xb5, 0x21, 0xef,
	0x20, 0x42, 0x58, 0x27, 0xde, 0xd2, 0x5f, 0xc7, 0x9b, 0x57, 0xf4, 0xff, 0x28, 0x28, 0x52, 0x59,
	0x4f, 0x22, 0x14, 0x02, 0xfb, 0x57, 0xa3, 0xa9, 0x78, 0x93, 0x52, 0x97, 0x03, 0x1d, 0x72, 0xa0,
	0x5f, 0x87, 0x1c, 0x18, 0xf2, 0xc8, 0x07, 0x98, 0x49, 0xfb, 0x9c, 0x0b, 0xaf, 0xd0, 0x6f, 0xbc,
	0x79, 0x78, 0xb2, 0xf3, 0xa9, 0xcf, 0x96, 0x8d, 0x54, 0xf2, 0x11, 0x40, 0x8e, 0xe9, 0xe1, 0x63,
	0xec, 0xb1, 0x1b, 0x67, 0xd7, 0x7c, 0xd9, 0x3f, 0x6c, 0xf2, 0x00, 0xb3, 0x42, 0x1f, 0x6a, 0x7e,
	0x16, 0x3a, 0x09, 0x97, 0xfe, 0x7a, 0xce, 0xa6, 0x85, 0xfe, 0x62, 0xdb, 0xed, 0xe2, 0xfb, 0xe3,
	0xa8, 0xa1, 0xda, 0x32, 0x6b, 0x9b, 0xdc, 0x7d, 0x42, 0x19, 0x2a, 0x1e, 0x23, 0x6c, 0xde, 0xff,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x72, 0x88, 0x50, 0x9c, 0x02, 0x00, 0x00,
}
